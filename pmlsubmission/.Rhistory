cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inversematrix <- x$getinverse()
# return the inverse matrix if it has been calculated already
if(!is.null(inversematrix)) {
message("Inverse matrix has been calculated already, getting cached data.")
return(inversematrix)
}
matr <- x$get()
# calculate the inverse matrix
inv_m <- solve(matr, ...)
# store that inverse matrix in the cache
x$setinverse(inv_m)
# print that matrix, thereby 'return' it
inv_m
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
##Part 2: best.R:
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv")
## Check that state and outcome are valid
states <- levels(data[, 7])[data[, 7]]
state_flag <- FALSE
for (i in 1:length(states)) {
if (state == states[i]) {
state_flag <- TRUE
}
}
if (!state_flag) {
stop ("invalid state")
}
if (!((outcome == "heart attack") | (outcome == "heart failure")
| (outcome == "pneumonia"))) {
stop ("invalid outcome")
}
## Return hospital name in that state with lowest 30-day death rate
col <- if (outcome == "heart attack") {
11
} else if (outcome == "heart failure") {
17
} else {
23
}
data[, col] <- suppressWarnings(as.numeric(levels(data[, col])[data[, col]]))
data[, 2] <- as.character(data[, 2])
statedata <- data[grep(state, data$State), ]
orderdata <- statedata[order(statedata[, col], statedata[, 2], na.last = NA), ]
orderdata[1, 2]
}
best("TX", "heart attack")
if (!file.exists("data")) {
dir.create("data")
}
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, destfile = "./data/06hid.csv", method = "curl")
dateDownloaded <- date()
HD <- read.csv("./data/06hid.csv")
xyplot()
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "ClientID", "ClientSecret")
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
req <- GET("https://api.github.com/rate_limit", config(token = github_token))
stop_for_status(req)
content(req)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(sqldf)
setwd("~/Desktop/Online Coursera/Coursera-Getting-and-Cleaning-Data/week2/data/")
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
library(sqldf)
install.packages("sqldf")
library(sqldf)
setwd("~/Desktop/Online Coursera/Coursera-Getting-and-Cleaning-Data/week2/data/")
acs <- read.csv("./getdata-data-ss06pid.csv", header=T, sep=",")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
f <- file.path(getwd(), "ss06hid.csv")
download.file(url, f)
dt <- data.table(read.csv(f))
agricultureLogical <- dt$ACR == 3 & dt$AGS == 6
knitr?
knitR()
install.packages(c("curl", "devtools", "git2r", "jsonlite", "mime", "R6", "Rcpp", "roxygen2", "stringi", "testthat", "xml2"))
library(ggplot2)
install.packages("stringi",type="mac.binary")
install.packages("stringi",type="win.binary")
library(ggplot2)
suppressWarnings()
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
warning(..., call. = TRUE, immediate. = FALSE, domain = NULL)
suppressWarnings(expr)
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
suppressWarnings(expr)
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
suppressWarnings(library())
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
suppressWarnings(library(knitr))
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
suppressWarnings(library())
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
suppressWarnings(library(knitr))
suppressWarnings(library(gridExtra))
suppressWarnings(library(grid))
suppressWarnings(library(ggplot2))
suppressWarnings(library(lubridate))
suppressWarnings(library(plyr))
suppressWarnings(library(dplyr))
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
install.packages("dplyr")
suppressWarnings(library(knitr))
suppressWarnings(library(gridExtra))
suppressWarnings(library(grid))
suppressWarnings(library(ggplot2))
suppressWarnings(library(lubridate))
suppressWarnings(library(plyr))
suppressWarnings(library(dplyr))
library(knitr)
library(gridExtra)
library(grid)
library(ggplot2)
library(lubridate)
library(plyr)
library(dplyr)
set.seed(1200)  # for reproducibility
simu  <- 1000  # number of simulated averages
lambda <- 0.2   # rate parameter
size <- 40
expsimulation <- matrix(rexp(simu*size, rate=lambda), simu, size)
row_means <- rowMeans(expsimulation)
mean(row_means)
1/lambda
ggplot(row_means, aes(x = x)) +
geom_density() +
geom_vline(xintercept=mean(row_means), size = 1, color = 'red')
library(ggplot2)
ggplot(row_means, aes(x = x)) + geom_density() + geom_vline(xintercept=mean(row_means), size = 1, color = 'red')
sd = sd(VarSimDt)))
"darkorange", size = 2, arg = list(mean=mean(VarSimDt), sd = sd(VarSimDt)))
data(ToothGrowth)
# Exploratory Data Analysis
head(ToothGrowth)# view some of the actual data
str(ToothGrowth) # view Data Structure
summary(ToothGrowth)# View data statistic
names(ToothGrowth)
# split of cases between different dose levels and delivery methods
table(ToothGrowth$dose, ToothGrowth$supp)
#plot
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=factor(dose))) +
geom_boxplot(notch=T) +
scale_fill_brewer(palette="RdPu", name="Dosage (mg)") +
guides(fill = guide_legend(reverse=TRUE)) +
xlab("Dosage (mg)") +
ylab("Length (mm)") +
facet_grid(.~supp) +
ggtitle("Toothgrowth by Supplement and Dosage")
# split of cases between different dose levels and delivery methods
table(ToothGrowth$dose, ToothGrowth$supp)
#plot
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=factor(dose))) +
geom_boxplot() +
scale_fill_brewer(palette="RdPu", name="Dosage (mg)") +
guides(fill = guide_legend(reverse=TRUE)) +
xlab("Dosage (mg)") +
ylab("Length (mm)") +
facet_grid(.~supp) +
ggtitle("Toothgrowth by Supplement and Dosage")
#LEN is modeled as a function of supp * dos
test = aov(len ~ supp * dose, data=ToothGrowth)
#summarize our model
summary(test)
# Assuming we're using an alpha of 0.05, we have a significant interaction.  We can now split the data by dose and compare supplements using a Tukey test
TukeyHSD(test, which=c("supp"), conf.level=.95)
# We could have also split our data by supplement and compare doses
TukeyHSD(test, which=c("dose"), conf.level=.95)
# we could have also run Tukey tests to compare all cell means
TukeyHSD(test, conf.level=.95)
aov.out = aov(len ~ supp * dose, data=ToothGrowth)
#summarize our model
summary(aov.out)
TukeyHSD(aov.out, which=c("supp"), conf.level=.95)
TukeyHSD(aov.out, which=c("supp"), conf.level=.99)
#LEN is modeled as a function of supp * dos
test = aov(len ~ supp * dose, data=ToothGrowth)
#summarize our model
summary(test)
TukeyHSD(test, which=c("supp"), conf.level=.95)
TukeyHSD(test, which=c("dose"), conf.level=.95)
data(ToothGrowth)
# Exploratory Data Analysis
head(ToothGrowth)# view some of the actual data
str(ToothGrowth) # view Data Structure
summary(ToothGrowth)# View data statistic
names(ToothGrowth)
ToothGrowth$dose = factor(ToothGrowth$dose, levels=c(0.5,1.0,2.0),
labels=c("low","med","high"))
ToothGrowth %>%
group_by(supp, dose) %>%
summarize(n=n(), mean=mean(len), sd=sd(len))
library(mosaic)
library(dplyr)
library(ggplot2)
library(ggvis)
library(parallel)
library(mosaic)
library(dplyr)
library(ggplot2)
library(parallel)
data(ToothGrowth)
# Exploratory Data Analysis
head(ToothGrowth)# view some of the actual data
str(ToothGrowth) # view Data Structure
summary(ToothGrowth)# View data statistic
names(ToothGrowth)
ToothGrowth$dose = factor(ToothGrowth$dose, levels=c(0.5,1.0,2.0),
labels=c("low","med","high"))
ToothGrowth %>%
group_by(supp, dose) %>%
summarize(n=n(), mean=mean(len), sd=sd(len))
# split of cases between different dose levels and delivery methods
table(ToothGrowth$dose, ToothGrowth$supp)
#plot
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=factor(dose))) +
geom_boxplot() +
scale_fill_brewer(palette="RdPu", name="Dosage (mg)") +
guides(fill = guide_legend(reverse=TRUE)) +
xlab("Dosage (mg)") +
ylab("Length (mm)") +
facet_grid(.~supp) +
ggtitle("Toothgrowth by Supplement and Dosage")
#LEN is modeled as a function of supp * dos
test = aov(len ~ supp * dose, data=ToothGrowth)
#summarize our model
summary(test)
# Assuming we're using an alpha of 0.05, we have a significant interaction.  We can now split the data by dose and compare supplements using a Tukey test
TukeyHSD(test, which=c("supp"), conf.level=.95)
# We could have also split our data by supplement and compare doses
TukeyHSD(test, which=c("dose"), conf.level=.95)
# we could have also run Tukey tests to compare all cell means
TukeyHSD(test, conf.level=.95)
model.tables(test, type = "means", se = TRUE, cterms = "supp:dose")
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"),col = c("blue", "red"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"),col = c("orange", "purple"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("m", "n"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("m", "n"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"), col=c("red","blue"),  xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
par.settings <- list(superpose.symbol = list(col = c("red", "green"), fill = c("red", "green")), superpose.line = list(col =c("red", "green"))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"),  xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
par.settings <- list(superpose.symbol = list(col = c("red", "green"), fill = c("red", "green")), superpose.line = list(col =c("red", "green")))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"), xlab = "Dose (mg)", ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE, lines = TRUE))
par.settings <- list(superpose.symbol = list(col = c("red", "green"), fill = c("red", "green")), superpose.line = list(col =c("red", "green")))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"), xlab = "Dose (mg)", ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE, lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"),col=c("purple","orange"), xlab = "Dose (mg)", ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, col=c("purple","orange"), points = FALSE, lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"),col=c("purple","orange"), xlab = "Dose (mg)", ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, col=c("purple","orange"), points = FALSE, lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"),col=c("purple","orange"), xlab = "Dose (mg)", ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, col=c("purple","orange"), superpose.line = list(col =c("purple", "orange")), points = FALSE, lines = TRUE))
xyplot(len ~ dose, data = ToothGrowth, groups = supp, type = c("a", "g"), xlab = "Dose (mg)",
ylab = "Tooth length", lwd = 2, auto.key = list(space = "top", columns = 2, points = FALSE,
lines = TRUE))
suppressWarnings(library)
library(mosaic)
library(dplyr)
library(ggplot2)
library(parallel)
suppressWarnings(library)
suppressPackageStartupMessages
suppressPackageStartupMessages
library(mosaic)
library(dplyr)
library(ggplot2)
library(parallel)
suppressPackageStartupMessages
suppressWarnings(library(mosaic))
library(mosaic)
library(dplyr)
library(ggplot2)
library(parallel)
suppressPackageStartupMessages
suppressWarnings(library(mosaic))
library(mosaic)
library(dplyr)
library(ggplot2)
library(parallel)
# Part II: Basic inferential data analysis
geom_violin() +
library(ggplot2)
ggplot(ToothGrowth, aes(x=factor(dose), y=len, fill=factor(dose))) +
geom_violin() +
scale_fill_brewer(palette="RdPu", name="Dosage (mg)") +
guides(fill = guide_legend(reverse=TRUE)) +
xlab("Dosage (mg)") +
ylab("Length (mm)") +
facet_grid(.~supp) +
ggtitle("Toothgrowth by Supplement and Dosage")
install.packages("caret")
install.packages("rpart")
install.packages("randomForest")
install.packages("rattle")
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(randomForest)
library(rattle)
library(lattice)
library(ggplot2)
library(caret)
library(rpart)
library(randomForest)
library(rattle)
library(lattice)
library(ggplot2)
library(caret)
library(survival)
library(gbm)
library(splines)
library(parallel)
library(plyr)
library(cluster)
library(lattice)
library(ggplot2)
library(caret)
library(survival)
library(gbm)
library(splines)
library(parallel)
library(plyr)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
training = read.csv('./pml-training.csv', header=TRUE)
testing  = read.csv('./pml-testing.csv',  header=TRUE)
training <- read.csv('./pml-training.csv')
testing <- read.csv('./pml-testing.csv')
training <- read.csv('pml-training.csv')
testing <- read.csv('pml-testing.csv')
setwd("C:/Users/tiani_000/Desktop/courserarpogramming/PML")
suppressPackageStartupMessages()
library(lattice)
library(ggplot2)
library(caret)
library(survival)
library(cluster)
library(splines)
library(parallel)
library(gbm)
library(plyr)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
tData = read.csv("pml-training.csv", na.strings=c("", "NA", "NULL"))
testDt = read.csv("pml-testing.csv", na.strings=c("", "NA", "NULL"))
dim(tData)
dim(testDt)
DtNAs <- apply(tData, 2, function(x) { sum(is.na(x)) })
LegitDt <- subset(tData[, which(DtNAs == 0)],
select=-c(X, user_name, new_window, num_window, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(LegitDt)
testDt <- testDt[, colSums(is.na(testDt)) == 0]
testData <- testDt[, -c(1:7)]
dim(testData)
teaching <- createDataPartition(LegitDt$classe, p=0.75, list=F)
tData <- LegitDt[teaching,]
testDt <- LegitDt[-teaching,]
Dom <- trainControl(method = "cv", number = 5)
RpartDt <- train(classe ~ ., data = tData, method = "rpart",
trControl = Dom)
print(RpartDt, digits = 4)
library(randomForest)
mock0 <- randomForest(classe ~ ., data = tData)
mock0
mock0$confusion
crossprognosis <- predict(mock0, testDt)
confusionMatrix(testDt$classe, crossprognosis)
JsDt <- trainControl(method="cv",number=3,allowParallel=TRUE,verboseIter=TRUE)
mock1 <- train(classe ~ ., data=tData, model="rf", trControl=JsDt)
library(rpart)
mock2= train(classe~.,data=tData,method="rpart",trControl=JsDt)
prognosis1=predict(mock1,tData)
prognosis2=predict(mock2,tData)
table(prognosis1,tData$classe)
table(prognosis2,tData$classe)
confusionMatrix(prognosis1,testDt$classe)
confusionMatrix(prognosis2,testDt$classe)
set.seed(1111)
JsDt <- trainControl(method="cv",number=3,allowParallel=TRUE,verboseIter=TRUE)
mock1 <- train(classe ~ ., data=tData, model="rf", trControl=JsDt)
library(rpart)
mock2= train(classe~.,data=tData,method="rpart",trControl=JsDt)
prognosis1=predict(mock1,tData)
prognosis2=predict(mock2,tData)
table(prognosis1,tData$classe)
table(prognosis2,tData$classe)
prognosis1=predict(mock1,testData)
prognosis2=predict(mock2,testData)
table(prognosis1,prognosis2)
set.seed(1111)
JsDt <- trainControl(method="cv",number=3,allowParallel=TRUE,verboseIter=TRUE)
mock1 <- train(classe ~ ., data=tData, model="rf", trControl=JsDt)
confusionMatrix(prognosis1,testData$classe)
confusionMatrix(prognosis1,testDt$classe)
set.seed(1111)
JsDt <- trainControl(method="cv",number=3,allowParallel=TRUE,verboseIter=TRUE)
mock1 <- train(classe ~ ., data=tData, model="rf", trControl=JsDt)
library(rpart)
mock2= train(classe~.,data=tData,method="rpart",trControl=JsDt)
prognosis1=predict(mock1,tData)
prognosis2=predict(mock2,tData)
table(prognosis1,tData$classe)
table(prognosis2,tData$classe)
prognosis1=predict(mock1,testData)
prognosis2=predict(mock2,testData)
table(prognosis1,prognosis2)
confusionMatrix(prognosis1,testData$classe)
answers=predict(modrf,testing)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers
answers=predict(mock1,testing)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers
answers=predict(mock1,testData)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
answers
setwd("C:/Users/tiani_000/Desktop/courserarpogramming/PML/pmlsubmission")
pml_write_files(answers)
sum(crossprognosis == testDt$classe) / length(crossprognosis)
sum(prognosis1 == tData$classe) / length(prognosis1)
sum(prognosis1 == testData$classe) / length(prognosis1)
sum(prognosis1 == testDt$classe) / length(prognosis1)
confusionMatrix(testDt$classe,table)
confusionMatrix(testDt$classe, prognosis1)
